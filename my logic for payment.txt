const createOrder = async (req, res) => {
    const frontend_url = "http://localhost:5173"; 
    try {
      const user = await userModel.findById(req.body.userId);
      if (!user) {
        return res.json({ success: false, message: "User not found" });
      }
  
      const cartData = user.cartData;
      const { firstname, lastname, email, address, phone } = req.body;
      let items = [];
      let totalPrice = 0;
  
      for (let itemId in cartData) {
        const product = await productModel.findById(itemId);
        if (product) {
          const quantity = cartData[itemId];
          items.push({
            productId: product._id,
            bakerId: product.bakerid,
            quantity,
            price: product.price,
          });
          totalPrice += product.price * quantity;
        }
      }
  
      const newOrder = new orderModel({
        userId: user._id,
        firstname,
        lastname,
        email,
        address,
        phone,
        totalPrice,
        items,
      });
  
      const savedOrder = await newOrder.save();
  
      
        // Update baker orders
        for (let item of items) {
            const baker = await bakerModel.findById(item.bakerId);
            if (baker) {
                baker.orders.push({
                    orderId: savedOrder._id,
                    items: [{
                        productId: item.productId,
                        quantity: item.quantity,
                        price: item.price
                    }],
                    status: "Pending"
                });
                await baker.save();
            }
        }
  
      user.cartData = {};
      await user.save();
  
      const line_items=req.body.items.map((item)=>({
        price_data:{
          currency:"inr",
          product_data:{
            name:item.name
          },
          //for inr
          unit_amount:item.price*100*80
        },
        quantity:item.quantity
      }))
  
      line_items.push({
        price_data:{
          currency:"inr",
          product_data:{
            name:"Delivery Charges"
          },
          unit_amount:2*100*80
        },
        quantity:1 
      })
  
      const session = await stripe.checkout.sessions.create({
        payment_method_types: ['card'],
        line_items,
        mode: 'payment',
        success_url: `${frontend_url}/verify?success=true&orderId=${savedOrder._id}`,
        cancel_url: `${frontend_url}/verify?success=false&orderId=${savedOrder._id}`,
      });
  
      res.json({ success: true, session_url: session.url });
    } catch (error) {
      console.error("Error creating order:", error.message); 
      res.json({ success: false, message: "Error creating order" });
    }
  };


//payment varification function
const verifyOrder=async (req,res)=>{
    const {orderId,success}=req.body;
    try {
      //if payment is successful
      if(success=="true")
      {
        await orderModel.findByIdAndUpdate(orderId,{payment:true});
        res.json({success:true,message:"Paid"});
      }
      else
      {
        //if payment is fail
        await orderModel.findByIdAndDelete(orderId);
        res.json({success:false,message:"Not Paid"});
      }
    } catch (error) {
      console.log(error);
      res.json({success:false,message:"Error"});
    }
  }  




import mongoose from "mongoose";
const orderSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'user', required: true },
    firstname: { type: String, required: true },
    lastname: { type: String, required: true },
    email: { type: String, required: true },
    address: { type: String, required: true },
    phone: { type: Number, required: true },
    totalPrice: { type: Number, required: true },
    status: { type: String, default: "Pending" },
    items: [
        {
            productId: { type: mongoose.Schema.Types.ObjectId, ref: 'product', required: true },
            bakerId: { type: mongoose.Schema.Types.ObjectId, ref: 'baker', required: true },
            quantity: { type: Number, required: true },
            price:{type:Number,required:true},
            status: { type: String, default: "Pending" }
        }
    ],
    payment:{type:Boolean,default:false}
}, { minimize: false });

const orderModel = mongoose.models.order || mongoose.model("order", orderSchema);
export default orderModel;

